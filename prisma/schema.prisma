// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          role       @default(USER)
  phoneNumber   String?
  firstName     String?
  lastName      String?
  accounts      Account[]
  sessions      Session[]
  issues        Issue[]
  solutions     Solution[]
}

enum role {
  USER
  ADMIN
}

model Issue {
  id         String @id @default(cuid())
  reportedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  longitude  Float
  latitude   Float

  status        issue_status
  statusMessage String
  issueCategory IssueCategory @relation(fields: [issueCategoryId], references: [id])
  photoUrl      String
  dateAdded     DateTime
  locationType  String

  userId          String
  issueCategoryId String
  priority        priority
  Solution        Solution[]
  Transaction     Transaction[]
}

enum priority {
  LOW
  MEDIUM
  HIGH
}

enum issue_status {
  PENDING
  APPROVED
  REJECTED
  PENDING_SOLVED
  SOLVED
}

model Solution {
  id            String          @id @default(cuid())
  issue         Issue           @relation(fields: [issueId], references: [id])
  solvedBy      User            @relation(fields: [userId], references: [id])
  status        solution_status
  statusMessage String
  photoUrl      String
  description   String
  issueId       String
  userId        String
  Transaction   Transaction[]
}

model Transaction {
  id    String   @id @default(cuid())
  coins Int
  date  DateTime

  issue   Issue?  @relation(fields: [issueId], references: [id])
  issueId String?

  solution   Solution? @relation(fields: [solutionId], references: [id])
  solutionId String?

  @@unique([id, issueId])
  @@unique([id, solutionId])
}

enum solution_status {
  PENDING
  APPROVED
  REJECTED
}

model IssueCategory {
  id                  String  @id @default(cuid())
  shortName           String
  longName            String
  icon                String
  isCommunitySolvable Boolean
  Issue               Issue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
