generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  role              String  @default("user")
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime? @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String        @default("user")
  coins         Int           @default(0)
  points        Int           @default(0)
  phoneNumber   String?
  firstName     String?
  lastName      String?
  accounts      Account[]
  sessions      Session[]
  issues        Issue[]
  solutions     Solution[]
  savedIssues   SavedIssue[]
  Transaction   Transaction[]
  likedIssues   LikedIssue[]
}

model Issue {
  id         String @id @default(cuid())
  reportedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  longitude  Float
  latitude   Float

  status           String    @default("pending")
  statusMessage    String?
  category         String
  photosUrl        String[]
  dateAdded        DateTime? @default(now())
  locationType     String
  moreDetails      String?
  shortDescription String
  priority         String
  isIssue          Boolean?
  description      String?
  county           String    @default("none")
  likes            Int       @default(0)

  userId   String
  Solution Solution[]
  savedBy  SavedIssue[]
  likedBy  LikedIssue[]
}

model Solution {
  id            String   @id @default(cuid())
  issue         Issue    @relation(fields: [issueId], references: [id])
  solvedBy      User     @relation(fields: [userId], references: [id])
  status        String   @default("pending")
  statusMessage String
  photosUrl     String[]
  description   String
  issueId       String
  userId        String
}

model Transaction {
  id     String    @id @default(cuid())
  userId String
  coins  Int
  date   DateTime? @default(now())
  user   User      @relation(fields: [userId], references: [id])
}

model Offer {
  id          String  @id @default(cuid())
  name        String
  partner     String
  value       Int
  description String
  photoUrl    String?
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime? @default(now())

  @@unique([identifier, token])
}

model SavedIssue {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  userId  String
  issueId String

  @@unique([userId, issueId])
}

model LikedIssue {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  userId  String
  issueId String

  @@unique([userId, issueId])
}
